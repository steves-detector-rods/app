ls:
  # e.g todoService.ts, [todoId].ts. The regex is camelCase within brackets []
  .ts: camelCase | PascalCase | regex:[A-Z]+[a-z]+(?:[A-Z]+[a-z]+)* | regex:\[[a-z]+(?:[A-Z]+[a-z]+)*\]
  # e.g. lighthouse.d.ts, NextApi.d.ts
  .d.ts: camelCase | PascalCase | regex:[A-Z]+[a-z]+(?:[A-Z]+[a-z]+)*
  # e.g. Component.tsx, index.tsx, [TodoForm].tsx. The first regex is PascalCase within brackets []--the second is to allow use*.tsx for hooks that use JSX
  .tsx: PascalCase | regex:[A-Z]+[a-z]+(?:[A-Z]+[a-z]+)* | regex:index | regex:\[[A-Z]+[a-z]+(?:[A-Z]+[a-z]+)*\] | regex:^use[A-Z]+[a-z]+(?:[A-Z]+[a-z]+)*
  # e.g. Component.test.tsx, index.test.tsx
  .test.tsx: PascalCase | regex:[A-Z]+[a-z]+(?:[A-Z]+[a-z]+)* | regex:index
  # e.g. service.test.ts
  .test.ts: camelCase
  .playwright.ts: camelCase
  src/pages:
    # For route casing purposes, we only allow camel casing or encapsulated variable files. E.g. `todos.tsx`, `createTodo.tsx`, `[todoId].tsx`
    # We do this so that you don't have to hit `/Todos` and can just type `/todos` in the browser, for example.
    .tsx: camelCase | regex:\[[a-z]+(?:[A-Z]+[a-z]+)*\]
ignore:
  - .git
  - .vscode
  - .next
  - next-env.d.ts
  - jest.config.js
  - jest.config.integration.js
  - jest.setup.ts
  - node_modules
  - src/__mocks__
  - src/pages
